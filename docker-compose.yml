### ATTENTION: THIS IS NOT A PRODUCTION COMPOSE FILE ###
# This compose file runs production environment on your local machine
# Security features (like SSL and database secrets) are disabled

# UI: http://docker.localhost
# API: http://api.docker.localhost/graphql

# Replace the `.env.production` with the `.env.productionOnLocalMachine` before using

version: '3.8'

services:
  db:
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: admin # This will be in secrets in a real proaduction compose file
      POSTGRES_PASSWORD: example # This will be in secrets in a real proaduction compose file
    volumes:
      - postgresdata:/var/lib/postgresql/data

  # Un comment this to get access to the database on http://adminer.docker.localhost
  # adminer:
  #   image: adminer
  #   restart: always
  #   labels:
  #     - 'traefik.http.routers.adminer.rule=Host(`adminer.docker.localhost`)'

  api:
    build:
      dockerfile: Dockerfile
      context: ./backend
    volumes:
      - ./backend:/usr/src/app
    environment:
      - PORT=4040
      - ALLOW_ORIGIN=http://docker.localhost
      - CLIENT_ADDRESS=http://docker.localhost
      - NODE_ENV=production
      - JWT_SECRET="JWT_DARK_SECRET" # This will be in secrets in a real proaduction compose file
      - DATABASE_URL="postgresql://admin:example@localhost:5432/miten?schema=public" # This will be in secrets in a real proaduction compose file

    labels:
      - 'traefik.http.routers.api.rule=Host(`api.docker.localhost`)'

  ui:
    build:
      dockerfile: Dockerfile
      context: ./frontend
    labels:
      - 'traefik.http.routers.ui.rule=Host(`docker.localhost`)'

  reverse-proxy:
    image: traefik:v2.4
    # Enables the web UI and tells Traefik to listen to docker
    command: --api.insecure=true --providers.docker
    ports:
      # The HTTP port
      - '80:80'
      # The Web UI (enabled by --api.insecure=true)
      - '8080:8080'
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock

volumes:
  postgresdata:
